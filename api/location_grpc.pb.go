// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: proto/location.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LocationClient is the client API for Location service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LocationClient interface {
	GetLocation(ctx context.Context, in *LocationRequest, opts ...grpc.CallOption) (*LocationResponse, error)
	SubscribeLocation(ctx context.Context, opts ...grpc.CallOption) (Location_SubscribeLocationClient, error)
}

type locationClient struct {
	cc grpc.ClientConnInterface
}

func NewLocationClient(cc grpc.ClientConnInterface) LocationClient {
	return &locationClient{cc}
}

func (c *locationClient) GetLocation(ctx context.Context, in *LocationRequest, opts ...grpc.CallOption) (*LocationResponse, error) {
	out := new(LocationResponse)
	err := c.cc.Invoke(ctx, "/location.Location/GetLocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationClient) SubscribeLocation(ctx context.Context, opts ...grpc.CallOption) (Location_SubscribeLocationClient, error) {
	stream, err := c.cc.NewStream(ctx, &Location_ServiceDesc.Streams[0], "/location.Location/SubscribeLocation", opts...)
	if err != nil {
		return nil, err
	}
	x := &locationSubscribeLocationClient{stream}
	return x, nil
}

type Location_SubscribeLocationClient interface {
	Send(*LocationRequest) error
	CloseAndRecv() (*LocationResponse, error)
	grpc.ClientStream
}

type locationSubscribeLocationClient struct {
	grpc.ClientStream
}

func (x *locationSubscribeLocationClient) Send(m *LocationRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *locationSubscribeLocationClient) CloseAndRecv() (*LocationResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(LocationResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LocationServer is the server API for Location service.
// All implementations must embed UnimplementedLocationServer
// for forward compatibility
type LocationServer interface {
	GetLocation(context.Context, *LocationRequest) (*LocationResponse, error)
	SubscribeLocation(Location_SubscribeLocationServer) error
	mustEmbedUnimplementedLocationServer()
}

// UnimplementedLocationServer must be embedded to have forward compatible implementations.
type UnimplementedLocationServer struct {
}

func (UnimplementedLocationServer) GetLocation(context.Context, *LocationRequest) (*LocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLocation not implemented")
}
func (UnimplementedLocationServer) SubscribeLocation(Location_SubscribeLocationServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeLocation not implemented")
}
func (UnimplementedLocationServer) mustEmbedUnimplementedLocationServer() {}

// UnsafeLocationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LocationServer will
// result in compilation errors.
type UnsafeLocationServer interface {
	mustEmbedUnimplementedLocationServer()
}

func RegisterLocationServer(s grpc.ServiceRegistrar, srv LocationServer) {
	s.RegisterService(&Location_ServiceDesc, srv)
}

func _Location_GetLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationServer).GetLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/location.Location/GetLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationServer).GetLocation(ctx, req.(*LocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Location_SubscribeLocation_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LocationServer).SubscribeLocation(&locationSubscribeLocationServer{stream})
}

type Location_SubscribeLocationServer interface {
	SendAndClose(*LocationResponse) error
	Recv() (*LocationRequest, error)
	grpc.ServerStream
}

type locationSubscribeLocationServer struct {
	grpc.ServerStream
}

func (x *locationSubscribeLocationServer) SendAndClose(m *LocationResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *locationSubscribeLocationServer) Recv() (*LocationRequest, error) {
	m := new(LocationRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Location_ServiceDesc is the grpc.ServiceDesc for Location service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Location_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "location.Location",
	HandlerType: (*LocationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLocation",
			Handler:    _Location_GetLocation_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeLocation",
			Handler:       _Location_SubscribeLocation_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/location.proto",
}
