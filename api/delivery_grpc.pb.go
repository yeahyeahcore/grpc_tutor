// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: proto/delivery.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CoordinatesClient is the client API for Coordinates service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CoordinatesClient interface {
	PostCoordinate(ctx context.Context, in *Coordinate, opts ...grpc.CallOption) (*Coordinate, error)
	GetAllCoordinates(ctx context.Context, in *CoordinateRequest, opts ...grpc.CallOption) (*CoordinatesResponse, error)
	GetCurrentCoorinate(ctx context.Context, in *CoordinateRequest, opts ...grpc.CallOption) (*Coordinate, error)
}

type coordinatesClient struct {
	cc grpc.ClientConnInterface
}

func NewCoordinatesClient(cc grpc.ClientConnInterface) CoordinatesClient {
	return &coordinatesClient{cc}
}

func (c *coordinatesClient) PostCoordinate(ctx context.Context, in *Coordinate, opts ...grpc.CallOption) (*Coordinate, error) {
	out := new(Coordinate)
	err := c.cc.Invoke(ctx, "/proto.Coordinates/PostCoordinate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coordinatesClient) GetAllCoordinates(ctx context.Context, in *CoordinateRequest, opts ...grpc.CallOption) (*CoordinatesResponse, error) {
	out := new(CoordinatesResponse)
	err := c.cc.Invoke(ctx, "/proto.Coordinates/GetAllCoordinates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coordinatesClient) GetCurrentCoorinate(ctx context.Context, in *CoordinateRequest, opts ...grpc.CallOption) (*Coordinate, error) {
	out := new(Coordinate)
	err := c.cc.Invoke(ctx, "/proto.Coordinates/GetCurrentCoorinate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CoordinatesServer is the server API for Coordinates service.
// All implementations must embed UnimplementedCoordinatesServer
// for forward compatibility
type CoordinatesServer interface {
	PostCoordinate(context.Context, *Coordinate) (*Coordinate, error)
	GetAllCoordinates(context.Context, *CoordinateRequest) (*CoordinatesResponse, error)
	GetCurrentCoorinate(context.Context, *CoordinateRequest) (*Coordinate, error)
	mustEmbedUnimplementedCoordinatesServer()
}

// UnimplementedCoordinatesServer must be embedded to have forward compatible implementations.
type UnimplementedCoordinatesServer struct {
}

func (UnimplementedCoordinatesServer) PostCoordinate(context.Context, *Coordinate) (*Coordinate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostCoordinate not implemented")
}
func (UnimplementedCoordinatesServer) GetAllCoordinates(context.Context, *CoordinateRequest) (*CoordinatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllCoordinates not implemented")
}
func (UnimplementedCoordinatesServer) GetCurrentCoorinate(context.Context, *CoordinateRequest) (*Coordinate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentCoorinate not implemented")
}
func (UnimplementedCoordinatesServer) mustEmbedUnimplementedCoordinatesServer() {}

// UnsafeCoordinatesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CoordinatesServer will
// result in compilation errors.
type UnsafeCoordinatesServer interface {
	mustEmbedUnimplementedCoordinatesServer()
}

func RegisterCoordinatesServer(s grpc.ServiceRegistrar, srv CoordinatesServer) {
	s.RegisterService(&Coordinates_ServiceDesc, srv)
}

func _Coordinates_PostCoordinate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Coordinate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinatesServer).PostCoordinate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Coordinates/PostCoordinate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinatesServer).PostCoordinate(ctx, req.(*Coordinate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coordinates_GetAllCoordinates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CoordinateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinatesServer).GetAllCoordinates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Coordinates/GetAllCoordinates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinatesServer).GetAllCoordinates(ctx, req.(*CoordinateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coordinates_GetCurrentCoorinate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CoordinateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinatesServer).GetCurrentCoorinate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Coordinates/GetCurrentCoorinate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinatesServer).GetCurrentCoorinate(ctx, req.(*CoordinateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Coordinates_ServiceDesc is the grpc.ServiceDesc for Coordinates service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Coordinates_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Coordinates",
	HandlerType: (*CoordinatesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PostCoordinate",
			Handler:    _Coordinates_PostCoordinate_Handler,
		},
		{
			MethodName: "GetAllCoordinates",
			Handler:    _Coordinates_GetAllCoordinates_Handler,
		},
		{
			MethodName: "GetCurrentCoorinate",
			Handler:    _Coordinates_GetCurrentCoorinate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/delivery.proto",
}
